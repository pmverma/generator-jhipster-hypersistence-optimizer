package <%= packageName %>.config;

import <%= packageName %>.domain.PersistentAuditEvent;
import <%= packageName %>.domain.User;
import io.hypersistence.optimizer.HypersistenceOptimizer;
import io.hypersistence.optimizer.core.config.JpaConfig;
import io.hypersistence.optimizer.core.event.Event;
<% if (['mysql','mariadb'].includes(prodDatabaseType) || ['mysql','mariadb'].includes(devDatabaseType)) { %>import io.hypersistence.optimizer.hibernate.event.mapping.identifier.IdentityGeneratorEvent;<% } %>
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Component;

import javax.persistence.EntityManagerFactory;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

@Configuration
public class HypersistenceConfiguration {

    @Bean
    public HypersistenceOptimizer hypersistenceOptimizer(
        EntityManagerFactory entityManagerFactory) {
        return new HypersistenceOptimizer(
            new JpaConfig(
                entityManagerFactory
            )<% if (['mysql','mariadb'].includes(prodDatabaseType) || ['mysql','mariadb'].includes(devDatabaseType)) { %>.setEventFilter(
                event -> !(event instanceof IdentityGeneratorEvent)
            )<% } %>
        );
    }
}

@Component
class HypersistenceRunner implements ApplicationRunner {

    private static final List<String> knownIssues;

    static {
        String elementCollectionEvent = "The [data] element-collection in the [".concat(PersistentAuditEvent.class.getCanonicalName()).concat("]");
        String batchFetchingEvent = "The [authorities] attribute in the [".concat(User.class.getCanonicalName()).concat("]");
        knownIssues = Arrays.asList(elementCollectionEvent, batchFetchingEvent);
    }

    private HypersistenceOptimizer hypersistenceOptimizer;

    private Environment environment;

    public HypersistenceRunner(HypersistenceOptimizer hypersistenceOptimizer, Environment environment) {
        this.hypersistenceOptimizer = hypersistenceOptimizer;
        this.environment = environment;
    }

    /**
     * This method will create a temp file of events in CI environment
     * By using that file we can proceed or fail the build
     *
     * @param args
     * @throws Exception
     */
    @Override
    public void run(ApplicationArguments args) throws Exception {
        long numberOfUnKnownIssues = getNumberOfUnknownIssues();
        if ("true".equalsIgnoreCase(environment.getProperty("IS_RUNNING_IN_CI")) && numberOfUnKnownIssues > 0) {
            logHoEvents();
        }
    }

    /**
     * Filter the known issues
     *
     * @return number of unknown issues after filtering
     */
    private long getNumberOfUnknownIssues() {
        long numberOfKnownIssues = this.hypersistenceOptimizer.getEvents().stream().map(Event::getDescription).map(
            message -> knownIssues.stream().anyMatch(message::contains)
        ).filter(aBoolean -> aBoolean).count();
        return this.hypersistenceOptimizer.getEvents().size() - numberOfKnownIssues;
    }


    private void logHoEvents() throws IOException {
        String fileContent = this.hypersistenceOptimizer.getEvents().stream().map(event -> LocalDateTime.now().toString().concat(" - ")
            .concat(event.getPriority().toString()).concat(" - ")
            .concat(event.getDescription()).concat(" - ")
            .concat(event.getInfoUrl())
        ).collect(Collectors.joining("\n"));

        Path path = Paths.get(environment.getProperty("user.home").concat(File.separator)
            .concat("a_file_used_by_jhipster_hypersistence_optimizer_to_store_temp_contents.log"));
        Path file = Files.createFile(path);
        Files.write(file, fileContent.getBytes());
    }
}
